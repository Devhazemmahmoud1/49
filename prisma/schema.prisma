// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:root@localhost:3306/fourtynine?schema=public"
  //url      = "mysql://49hub1:Database49hub@64.225.101.68:3306/fourtynine?schema=public"
}

model Users {
  id            Int              @id @default(autoincrement())
  firstName     String           @db.VarChar(255)
  lastName      String           @db.VarChar(255)
  email         String           @db.VarChar(5000)
  phone         String           @db.VarChar(255)
  password      String           @db.VarChar(255)
  is_locked     Int              @default(0)
  ref_number    String           @db.VarChar(255)
  device_id     String?          @db.VarChar(100)
  fcm           String?          @db.VarChar(300)
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
  Wallet        Wallet?
  Ride          ride[]
  subscriptions subscriptions[]
  agent         ridesRequested[]
  ads           Advertisment[]
  userSettings  userSettings[]
  userPrivacy   userPrivacy[]
}

model Blocked_users {
  id         Int      @id @default(autoincrement())
  phone      String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model MainCategories {
  id            Int                       @id @default(autoincrement())
  name_en       String                    @db.VarChar(5000)
  name_ar       String                    @db.VarChar(5000)
  is_hidden     Int                       @default(0)
  created_at    DateTime                  @default(now())
  updated_at    DateTime                  @updatedAt
  subCategories SubCategories[]
  photo         MainCategoryAttachments[]
}

model SubCategories {
  id              Int                      @id @default(autoincrement())
  name_en         String                   @db.VarChar(5000)
  name_ar         String                   @db.VarChar(5000)
  is_hidden       Int                      @default(0)
  parent          Int
  paymentFactor   Int                      @default(0)
  portion         Int                      @default(0)
  providerPortion Int                      @default(0)
  dailyPrice      Int                      @default(0)
  grossMoney      String?                  @db.VarChar(191)
  created_at      DateTime                 @default(now())
  updated_at      DateTime                 @updatedAt
  Categories      MainCategories           @relation(fields: [parent], references: [id])
  photo           SubCategoryAttachments[]
  props           subCategoryProperties[]
  ads             Advertisment[]
}

model MainCategoryAttachments {
  id          Int            @id @default(autoincrement())
  category_id Int
  url         String         @db.VarChar(5000)
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  MainPhoto   MainCategories @relation(fields: [category_id], references: [id])
}

model SubCategoryAttachments {
  id          Int           @id @default(autoincrement())
  category_id Int
  url         String        @db.VarChar(5000)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  SubPhoto    SubCategories @relation(fields: [category_id], references: [id])
}

model Wallet {
  id               Int              @id @default(autoincrement())
  user_id          Int              @unique
  balance          String
  startBalance     String
  balanceAfter5    String
  grossMoney       String
  generatedBal     String
  profit           String
  total            String
  FiveYears        String
  TenYears         String
  providerCashBack String?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  user             Users            @relation(fields: [user_id], references: [id])
  Activity         WalletActivity[]
}

model WalletActivity {
  id           Int      @id @default(autoincrement())
  wallet_id    Int
  activityType Int      @db.Int
  activityText String   @db.VarChar(5000)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  Wallet       Wallet   @relation(fields: [wallet_id], references: [id])
}

model Payment {
  id            Int            @id @default(autoincrement())
  user_id       Int
  paymentIn     String
  paymentOut    String
  transNum      String
  paymentMethod Int
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  payment       paymentMethods @relation(fields: [paymentMethod], references: [id])
}

model subscriptions {
  id         Int      @id @default(autoincrement())
  user_id    Int
  period     String   @db.VarChar(5000)
  isPermium  Int      @default(0)
  user       Users    @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model paymentMethods {
  id                Int       @id @default(autoincrement())
  name              String
  gatewayConstant   String
  gatewayPercentage String
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  payment           Payment[]
}

model GovFees {
  id         Int      @id @default(autoincrement())
  VAT        String
  Tax        String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model cashBackRules {
  id               Int      @id @default(autoincrement())
  step             Int //
  requestPortion   String //
  callPortion      String // 
  likePortion      String //
  viewPortion      String //
  sharePortion     String //
  anyPortion       String //  
  xFactor          String?
  overHeadPortion  String?
  overHeadConstant String?
  totalGovCut      String?
  virtualMoney     String? // amount + wallet 
  transNum         String?
  overHeadFactor   String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model cashBackStorage {
  id               Int      @id @default(autoincrement())
  fees             Int      @default(0)
  fourtyNineGain   String
  providerCashBack String //
  requestCashBack  String
  callCashBack     String
  likeCashBack     String
  viewCashBack     String
  shareCashBack    String
  anyCashBack      String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model RunningCost {
  id         Int      @id @default(autoincrement())
  amount     String
  reason     String   @db.LongText
  paymentOut String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model PaymentGateWayFees {
  id            Int      @id @default(autoincrement())
  paymentMethod String
  totalFees     Float?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model PayoutRequests {
  id            Int      @id @default(autoincrement())
  user_id       Int
  amount        String
  is_withdrawin Int      @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model AppInfo {
  id         Int      @id @default(autoincrement())
  intrest    Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Profit {
  id               Int      @id @default(autoincrement())
  user_id          Int
  startBalance     Float?   @default(0)
  generatedBalance Float?   @default(0)
  intest           Int      @default(0)
  profit           Float?   @default(0)
  total            Float?   @default(0)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model ride {
  id              Int                @id @default(autoincrement())
  user_id         Int
  carModel        String             @db.VarChar(255)
  distancePerKilo Decimal            @db.Decimal(9, 2)
  isApproved      Int                @default(0)
  category_id     Int                @default(0)
  user            Users              @relation(fields: [user_id], references: [id])
  riderPhoto      ridersAttachment[]
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  requestRide     ridesRequested[]
}

model ridersAttachment {
  id         Int      @id @default(autoincrement())
  rideId     Int
  url        String   @db.VarChar(255)
  type       Int      @db.Int
  ridePhotos ride     @relation(fields: [rideId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ridesPendingRequests {
  id         Int      @id @default(autoincrement())
  client_id  Int      @db.Int
  total      String
  lng        String
  lat        String
  toLng      String
  toLat      String
  isTaken    Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ridesRequested {
  id         Int      @id @default(autoincrement())
  client_id  Int      @db.Int
  rider_id   Int
  distance   String
  total      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  clientInfo Users    @relation(fields: [client_id], references: [id])
  agentInfo  ride     @relation(fields: [rider_id], references: [user_id])
}

model loading {
  id                Int                  @id @default(autoincrement())
  user_id           Int
  carModel          String
  lng               String
  lat               String
  hashCode          String
  category_id       Int
  loadingAttachment loadingAttachments[]
  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt
}

model loadingAttachments {
  id          Int      @id @default(autoincrement())
  url         String
  loading_id  Int
  type        Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  attachments loading  @relation(fields: [loading_id], references: [id])
}

model loadingRequests {
  id         Int                         @id @default(autoincrement())
  client_id  Int
  hash       String
  fromLng    String
  fromLat    String
  toLng      String
  toLat      String
  date       String
  created_at DateTime                    @default(now())
  updated_at DateTime                    @updatedAt
  photos     loadingShippingAttachment[]
}

model loadingShippingAttachment {
  id          Int             @id @default(autoincrement())
  request_id  Int
  url         String
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  attachments loadingRequests @relation(fields: [request_id], references: [id])
}

model resturants {
  id                   Int                         @id @default(autoincrement())
  name                 String
  lng                  String
  lat                  String
  workFrom_en          String
  workFrom_ar          String
  workTo_en            String
  workTo_ar            String
  contant_number       String?
  category_id          Int
  created_at           DateTime                    @default(now())
  updated_at           DateTime                    @updatedAt
  workingDays          restWorkingDays[]
  resturantAttachments resturantAttachments[]
  resturantCategory    resturantMainCategoryMenu[]
}

model restWorkingDays {
  id           Int        @id @default(autoincrement())
  day_en       String
  day_ar       String
  resturant_id Int
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  workingDays  resturants @relation(fields: [resturant_id], references: [id])
}

model resturantAttachments {
  id           Int        @id @default(autoincrement())
  url          String
  resturant_id Int
  resturant    resturants @relation(fields: [resturant_id], references: [id])
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
}

model resturantMainCategoryMenu {
  id           Int                             @id @default(autoincrement())
  name         String
  resturant_id Int
  created_at   DateTime                        @default(now())
  update_at    DateTime                        @updatedAt
  resutantMenu resturantSpecificCategoryMeal[]
  resturant    resturants                      @relation(fields: [resturant_id], references: [id])
}

model resturantSpecificCategoryMeal {
  id             Int                       @id @default(autoincrement())
  mainCategoryId Int
  name           String
  description    String                    @db.LongText
  price          String
  url            String
  created_at     DateTime                  @default(now())
  updated_at     DateTime                  @updatedAt
  subCategory    resturantMainCategoryMenu @relation(fields: [mainCategoryId], references: [id])
}

model HealthCare {
  id             Int                     @id @default(autoincrement())
  contact_number String?
  specification  String
  lng            String
  lat            String
  workFrom       String
  workTo         String
  price          String
  category_id    Int
  waitingPeriod  String?
  workingDays    DocWorkingDays[]
  attachments    HealthCareAttachments[]
}

model HealthCareAttachments {
  id         Int        @id @default(autoincrement())
  health_id  Int
  url        String
  type       Int
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  HealthCare HealthCare @relation(fields: [health_id], references: [id])
}

model DocWorkingDays {
  id          Int        @id @default(autoincrement())
  day_en      String
  day_ar      String
  doc_id      Int
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  workingDays HealthCare @relation(fields: [doc_id], references: [id])
}

model Advertisment {
  id              Int              @id @default(autoincrement())
  title           String           @db.VarChar(255)
  desc            String           @db.LongText
  mainCategory_id Int
  subCategory_id  Int
  user_id         Int
  is_pending      Int              @default(0)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  user            Users            @relation(fields: [user_id], references: [id])
  sub             SubCategories    @relation(fields: [subCategory_id], references: [id])
  attachments     AdsAttachments[]
  values          userPropValues[]
  favo            favorates[]
}

model AdsAttachments {
  id          Int          @id @default(autoincrement())
  url         String
  ad_id       Int
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  attachments Advertisment @relation(fields: [ad_id], references: [id])
}

model subCategoryProperties {
  id          Int             @id @default(autoincrement())
  prop_en     String
  prop_ar     String
  category_id Int
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  subCategory SubCategories   @relation(fields: [category_id], references: [id])
  propValues  userPropValues?
}

model userPropValues {
  id                     Int                   @id @default(autoincrement())
  subCategory_id         Int
  subCategoryProperty_id Int                   @unique
  value                  String
  ad_id                  Int
  created_at             DateTime              @default(now())
  updated_at             DateTime              @updatedAt
  Subprops               subCategoryProperties @relation(fields: [subCategoryProperty_id], references: [id])
  ad                     Advertisment          @relation(fields: [ad_id], references: [id])
}

model favorates {
  id         Int          @id @default(autoincrement())
  ad_id      Int
  user_id    Int
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  ads        Advertisment @relation(fields: [ad_id], references: [id])
}

// model customAds {
//   id Int @id @default(autoincrement())
//   package
// }

model userSettings {
  id             Int      @id @default(autoincrement())
  user_id        Int
  settingName_ar String?
  settingName_en String?
  value          String?
  status         Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  user           Users    @relation(fields: [user_id], references: [id])
}

model userPrivacy {
  id             Int      @id @default(autoincrement())
  user_id        Int
  settingName_ar String?
  settingName_en String?
  status         Int
  type           Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  user           Users    @relation(fields: [user_id], references: [id])
}

// country       String?
// birthDate     DateTime         @default(now())
// status        String?
// job           String?
// city          String?
// address       String           @db.Text
//  gender        Int              @default(1)
