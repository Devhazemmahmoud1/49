// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  //url      = "mysql://root:root@localhost:3306/fourtynine?schema=public"
  url      = "mysql://49hub1:Database49hub@64.225.101.68:3306/fourtynine?schema=public"
}

model Admins {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  password   String
  role       Int      @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Users {
  id               Int                  @id @default(autoincrement())
  firstName        String               @db.VarChar(255)
  lastName         String               @db.VarChar(255)
  email            String               @db.VarChar(5000)
  phone            String               @db.VarChar(255)
  password         String               @db.VarChar(255)
  is_locked        Int                  @default(0)
  ref_number       String               @db.VarChar(255)
  device_id        String?              @db.VarChar(100)
  fcm              String?              @db.VarChar(300)
  countryCode      String?
  hashCode         String?
  providerCashBack Decimal              @default(0) @db.Decimal(9, 2)
  created_at       DateTime             @default(now())
  updated_at       DateTime             @updatedAt
  Wallet           Wallet?
  profilePicture   String?
  coverPicture     String?
  tenderPicture    String?
  recentLikes      Int?                 @default(0)
  recentShare      Int?                 @default(0)
  recentViews      Int?                 @default(0)
  Ride             ride[]
  resturants       resturants[]
  subscriptions    subscriptions[]
  agent            ridesRequested[]
  ads              Advertisment[]
  userSettings     userSettings[]
  userPrivacy      userPrivacy[]
  posts            Posts[]
  friends          friends[]
  followers        followers[]
  friendRequests   friendRequests[]
  blocked          socialBlockedUsers[]
  notifications    notifications[]
}

model ref {
  id         Int      @id @default(autoincrement())
  inviter    Int
  invited    Int
  is_new     Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Blocked_users {
  id         Int      @id @default(autoincrement())
  phone      String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model MainCategories {
  id            Int                       @id @default(autoincrement())
  name_en       String                    @db.VarChar(5000)
  name_ar       String                    @db.VarChar(5000)
  is_hidden     Int                       @default(0)
  created_at    DateTime                  @default(now())
  updated_at    DateTime                  @updatedAt
  subCategories SubCategories[]
  photo         MainCategoryAttachments[]
}

model SubCategories {
  id              Int                      @id @default(autoincrement())
  name_en         String                   @db.VarChar(5000)
  name_ar         String                   @db.VarChar(5000)
  is_hidden       Int                      @default(0)
  parent          Int
  paymentFactor   Int                      @default(0)
  portion         Int                      @default(0)
  providerPortion Int                      @default(0)
  dailyPrice      Int                      @default(0)
  grossMoney      String?                  @db.VarChar(191)
  created_at      DateTime                 @default(now())
  updated_at      DateTime                 @updatedAt
  Categories      MainCategories           @relation(fields: [parent], references: [id])
  photo           SubCategoryAttachments[]
  props           subCategoryProperties[]
  ads             Advertisment[]
}

model MainCategoryAttachments {
  id          Int            @id @default(autoincrement())
  category_id Int
  url         String         @db.VarChar(5000)
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  MainPhoto   MainCategories @relation(fields: [category_id], references: [id])
}

model SubCategoryAttachments {
  id          Int           @id @default(autoincrement())
  category_id Int
  url         String        @db.VarChar(5000)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  SubPhoto    SubCategories @relation(fields: [category_id], references: [id])
}

model Wallet {
  id                Int              @id @default(autoincrement())
  user_id           Int              @unique
  balance           String
  startBalance      String
  balanceAfter5     String
  grossMoney        String
  generatedBal      String
  profit            String
  total             String
  FiveYears         String
  TenYears          String
  providerCashBack  String?
  refundStorage     Decimal?         @default(0) @db.Decimal(9, 2)
  PendingStorage    Decimal?         @default(0) @db.Decimal(9, 2)
  FreeClicksStorage Decimal?         @default(0) @db.Decimal(9, 2)
  refPayBack        Decimal?         @default(0) @db.Decimal(9, 2)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  user              Users            @relation(fields: [user_id], references: [id])
  Activity          WalletActivity[]
}

model WalletActivity {
  id           Int      @id @default(autoincrement())
  wallet_id    Int
  activityType Int      @db.Int
  activityText String   @db.VarChar(5000)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  Wallet       Wallet   @relation(fields: [wallet_id], references: [id])
}

model cashBackStep {
  id         Int      @id @default(autoincrement())
  step       Decimal  @db.Decimal(9, 2)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Payment {
  id            Int            @id @default(autoincrement())
  user_id       Int
  paymentIn     String
  paymentOut    String
  transNum      String
  paymentMethod Int
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  payment       paymentMethods @relation(fields: [paymentMethod], references: [id])
}

model subscriptions {
  id         Int      @id @default(autoincrement())
  user_id    Int
  period     String   @db.VarChar(5000)
  subCat_id  Int
  isPermium  Int      @default(0)
  user       Users    @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model paymentMethods {
  id                Int       @id @default(autoincrement())
  name              String
  gatewayConstant   String
  gatewayPercentage String
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  payment           Payment[]
}

model GovFees {
  id         Int      @id @default(autoincrement())
  VAT        String
  Tax        String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model cashBackRules {
  id               Int      @id @default(autoincrement())
  step             Int //
  requestPortion   String //
  callPortion      String // 
  likePortion      String //
  viewPortion      String //
  sharePortion     String //
  anyPortion       String //  
  xFactor          String?
  overHeadPortion  String?
  overHeadConstant String?
  totalGovCut      String?
  virtualMoney     String? // amount + wallet 
  transNum         String?
  overHeadFactor   String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model cashBackStorage {
  id               Int      @id @default(autoincrement())
  fees             Int      @default(0)
  fourtyNineGain   String
  providerCashBack String?
  requestCashBack  String
  callCashBack     String
  likeCashBack     String
  viewCashBack     String
  shareCashBack    String
  anyCashBack      String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model dailyCashBack {
  id         Int      @id @default(autoincrement())
  amount     Decimal  @db.Decimal(9, 2)
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model RunningCost {
  id         Int      @id @default(autoincrement())
  amount     String
  reason     String   @db.LongText
  paymentOut String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model PaymentGateWayFees {
  id            Int      @id @default(autoincrement())
  paymentMethod String
  totalFees     Float?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model PayoutRequests {
  id            Int      @id @default(autoincrement())
  user_id       Int
  amount        String
  is_withdrawin Int      @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model AppInfo {
  id         Int      @id @default(autoincrement())
  intrest    Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Profit {
  id               Int      @id @default(autoincrement())
  user_id          Int
  startBalance     Float?   @default(0)
  generatedBalance Float?   @default(0)
  intest           Int      @default(0)
  profit           Float?   @default(0)
  total            Float?   @default(0)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model ride {
  id              Int                @id @default(autoincrement())
  user_id         Int
  carModel        String             @db.VarChar(255)
  distancePerKilo Decimal            @db.Decimal(9, 2)
  isApproved      Int                @default(0)
  category_id     Int                @default(0)
  user            Users              @relation(fields: [user_id], references: [id])
  riderPhoto      ridersAttachment[]
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  requestRide     ridesRequested[]
}

model ridersAttachment {
  id         Int      @id @default(autoincrement())
  rideId     Int
  url        String   @db.VarChar(255)
  type       Int      @db.Int
  ridePhotos ride     @relation(fields: [rideId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ridesPendingRequests {
  id         Int      @id @default(autoincrement())
  client_id  Int      @db.Int
  total      String
  lng        String
  lat        String
  toLng      String
  toLat      String
  isTaken    Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ridesRequested {
  id         Int      @id @default(autoincrement())
  client_id  Int      @db.Int
  rider_id   Int
  distance   String
  total      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  clientInfo Users    @relation(fields: [client_id], references: [id])
  agentInfo  ride     @relation(fields: [rider_id], references: [user_id])
}

model loading {
  id                Int                  @id @default(autoincrement())
  user_id           Int
  carModel          String
  lng               String
  lat               String
  hashCode          String
  category_id       Int
  loadingAttachment loadingAttachments[]
  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt
}

model loadingAttachments {
  id          Int      @id @default(autoincrement())
  url         String
  loading_id  Int
  type        Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  attachments loading  @relation(fields: [loading_id], references: [id])
}

model loadingRequests {
  id         Int                         @id @default(autoincrement())
  client_id  Int
  hash       String
  fromLng    String
  fromLat    String
  toLng      String
  toLat      String
  date       String
  created_at DateTime                    @default(now())
  updated_at DateTime                    @updatedAt
  photos     loadingShippingAttachment[]
}

model loadingShippingAttachment {
  id          Int             @id @default(autoincrement())
  request_id  Int
  url         String
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  attachments loadingRequests @relation(fields: [request_id], references: [id])
}

model resturants {
  id                   Int                         @id @default(autoincrement())
  name                 String
  user_id              Int
  lng                  String
  lat                  String
  workFrom_en          String
  workFrom_ar          String
  workTo_en            String
  workTo_ar            String
  contant_number       String?
  category_id          Int
  created_at           DateTime                    @default(now())
  updated_at           DateTime                    @updatedAt
  workingDays          restWorkingDays[]
  resturantAttachments resturantAttachments[]
  resturantCategory    resturantMainCategoryMenu[]
  resturant            Users                       @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model restWorkingDays {
  id           Int        @id @default(autoincrement())
  day_en       String?
  day_ar       String?
  resturant_id Int
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  workingDays  resturants @relation(fields: [resturant_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model resturantAttachments {
  id           Int        @id @default(autoincrement())
  url          String
  resturant_id Int
  type         Int
  resturant    resturants @relation(fields: [resturant_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
}

model resturantMainCategoryMenu {
  id           Int                             @id @default(autoincrement())
  name         String
  resturant_id Int
  created_at   DateTime                        @default(now())
  update_at    DateTime                        @updatedAt
  resutantMenu resturantSpecificCategoryMeal[]
  resturant    resturants                      @relation(fields: [resturant_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model resturantSpecificCategoryMeal {
  id             Int                       @id @default(autoincrement())
  mainCategoryId Int
  name           String
  description    String                    @db.LongText
  price          String
  url            String
  created_at     DateTime                  @default(now())
  updated_at     DateTime                  @updatedAt
  subCategory    resturantMainCategoryMenu @relation(fields: [mainCategoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model HealthCare {
  id             Int                     @id @default(autoincrement())
  contact_number String?
  specification  String
  lng            String
  lat            String
  workFrom       String
  workTo         String
  price          String
  category_id    Int
  waitingPeriod  String?
  created_at     DateTime                @default(now())
  updated_at     DateTime                @updatedAt
  workingDays    DocWorkingDays[]
  attachments    HealthCareAttachments[]
}

model HealthCareAttachments {
  id         Int        @id @default(autoincrement())
  health_id  Int
  url        String
  type       Int
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  HealthCare HealthCare @relation(fields: [health_id], references: [id])
}

model DocWorkingDays {
  id          Int        @id @default(autoincrement())
  day_en      String
  day_ar      String
  doc_id      Int
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  workingDays HealthCare @relation(fields: [doc_id], references: [id])
}

model Advertisment {
  id              Int              @id @default(autoincrement())
  title           String           @db.VarChar(255)
  desc            String           @db.LongText
  mainCategory_id Int
  subCategory_id  Int
  user_id         Int
  is_pending      Int              @default(0)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  user            Users            @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  sub             SubCategories    @relation(fields: [subCategory_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  attachments     AdsAttachments[]
  values          userPropValues[]
  favo            favorates[]
}

model AdsAttachments {
  id          Int          @id @default(autoincrement())
  url         String
  ad_id       Int
  type        Int          @default(1)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  attachments Advertisment @relation(fields: [ad_id], references: [id])
}

model subCategoryProperties {
  id             Int              @id @default(autoincrement())
  prop_en        String
  prop_ar        String
  dataType       Int
  type           Int
  identifier     Int
  position       Int
  subCategory_id Int
  dropDownValues Json?
  DateFrom       String?
  DateTo         String?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  subCategory    SubCategories    @relation(fields: [subCategory_id], references: [id])
  propValues     userPropValues[]
}

model userPropValues {
  id                     Int                   @id @default(autoincrement())
  subCategory_id         Int
  subCategoryProperty_id Int                   @unique
  value                  String                @db.VarChar(5000)
  ad_id                  Int
  created_at             DateTime              @default(now())
  updated_at             DateTime              @updatedAt
  Subprops               subCategoryProperties @relation(fields: [subCategoryProperty_id], references: [id])
  ad                     Advertisment          @relation(fields: [ad_id], references: [id])
}

model favorates {
  id         Int          @id @default(autoincrement())
  ad_id      Int
  user_id    Int
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  ads        Advertisment @relation(fields: [ad_id], references: [id])
}

model userSettings {
  id             Int      @id @default(autoincrement())
  user_id        Int
  identifier     Int      @default(0)
  settingName_ar String?
  settingName_en String?
  value          String?
  status         Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  user           Users    @relation(fields: [user_id], references: [id])
}

model userPrivacy {
  id             Int      @id @default(autoincrement())
  identifier     Int      @default(0)
  user_id        Int
  settingName_ar String?
  settingName_en String?
  status         Int
  type           Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  user           Users    @relation(fields: [user_id], references: [id])
}

// country       String?
// birthDate     DateTime         @default(now())
// status        String?
// job           String?
// city          String?
// address       String           @db.Text
// gender        Int              @default(1)

model Posts {
  id              Int               @id @default(autoincrement())
  post_content    String            @db.LongText
  user_id         Int
  total_reactions Int               @default(0)
  total_comments  Int               @default(0)
  total_shares    Int?              @default(0)
  feeling_id      Int
  activity_id     Int               @default(0)
  location        String?
  lng             String?
  lat             String?
  totalLikes      Int?
  totalWoW        Int?
  totalAngry      Int?
  totalSad        Int?
  totalLove       Int?
  type            Int               @default(0)
  privacy         Int               @default(0)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  attachments     postAttachments[]
  user            Users             @relation(fields: [user_id], references: [id])
  tags            postTags[]
  hidden          postsPrivacy?
}

model postsPrivacy {
  id           Int      @id @default(autoincrement())
  post_id      Int      @unique
  user_id      Int
  hidden       Boolean  @default(true)
  isPostHidden Posts    @relation(fields: [post_id], references: [id])
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model Reports {
  id            Int      @id @default(autoincrement())
  user_id       Int
  reported_user Int
  reason        String?
  message       String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model postFeelings {
  id         Int      @id @default(autoincrement())
  feeling_ar String
  feeling_en String
  url        String
  type       Int
  //postFeeling Posts    @relation(fields: [id], references: [feeling_id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model postActivity {
  id          Int      @id @default(autoincrement())
  activity_ar String
  activity_en String
  url         String
  type        Int
  //postActivity Posts    @relation(fields: [id], references: [activity_id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model postTags {
  id          Int      @id @default(autoincrement())
  post_id     Int
  user_id     Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  taggedUsers Posts    @relation(fields: [post_id], references: [id])
}

model socialBlockedUsers {
  id           Int      @id @default(autoincrement())
  user_id      Int
  blocked_user Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  users        Users    @relation(fields: [blocked_user], references: [id])
}

model postAttachments {
  id         Int      @id @default(autoincrement())
  post_id    Int
  url        String
  type       Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  post       Posts    @relation(fields: [post_id], references: [id])
}

// pagination is required for comments
model Comments {
  id              Int      @id @default(autoincrement())
  user_id         Int
  comment_content String   @db.Text
  post_id         Int
  total_reactions Int
  totalLikes      Int?     @default(0)
  totalWoW        Int?     @default(0)
  totalAngry      Int?     @default(0)
  totalSad        Int?     @default(0)
  totalLove       Int?     @default(0)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model reactions {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int?
  comment_id Int?     @default(0)
  type       Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model friends {
  id         Int      @id @default(autoincrement())
  user_id    Int
  friend_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       Users    @relation(fields: [friend_id], references: [id])
}

model followers {
  id          Int      @id @default(autoincrement())
  user_id     Int
  follower_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        Users    @relation(fields: [follower_id], references: [id])
}

model friendRequests {
  id              Int      @id @default(autoincrement())
  user_id         Int
  friendRequestTo Int
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user            Users    @relation(fields: [friendRequestTo], references: [id])
}

model notifications {
  id          Int      @id @default(autoincrement())
  sender_id   Int
  reciever_id Int
  message_en  String
  messgae_ar  String
  is_read     Int      @default(0)
  type        Int
  direction   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        Users    @relation(fields: [reciever_id], references: [id])
}

model saraha {
  id           Int      @id @default(autoincrement())
  message      String   @db.Text
  user_id      Int
  sentTo       Int
  picturesRate Int      @default(0)
  postsRate    Int      @default(0)
  engagment    Int      @default(0)
  totalRate    Int      @default(0)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model Gallary {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  url        String
  type       Int      @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model songs {
  id         Int      @id @default(autoincrement())
  name       String
  desc       String?
  playUrl    String
  duration   Int?
  thumbUrl   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  reel       reels  @relation(fields: [id], references: [song_id])
}

model reels {
  id            Int         @id @default(autoincrement())
  desc          String?
  videoUrl      String
  user_id       Int
  videoThumbUrl String
  videoDuration Int
  totalViews    Int         @default(0)
  totalLikes    Int         @default(0)
  song_id       Int         @unique
  songs         songs[]       
  type          Int         @default(1)
  reelLikes     reelLikes[]
  reelViews     reelViews[]
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model reelLikes {
  id         Int      @id @default(autoincrement())
  user_id    Int
  reel_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  reels      reels    @relation(fields: [reel_id], references: [id])
}

model reelViews {
  id         Int      @id @default(autoincrement())
  user_id    Int
  reel_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  reels      reels    @relation(fields: [reel_id], references: [id])
}

model requests {
  id      Int @id @default(autoincrement())
  user_id Int
  ad_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
